<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on PingCAP Site</title>
    <link>https://pingcap.com/blog/</link>
    <description>Recent content in Blogs on PingCAP Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://pingcap.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bringing TiKV to Rust Devroom at FOSDEM 2018</title>
      <link>https://pingcap.com/blog/FOSDEM-2018-Rust-Devroom-reflection/</link>
      <pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/FOSDEM-2018-Rust-Devroom-reflection/</guid>
      <description>At the crack of dawn on February 1, I landed in Brussels, Belgium, for the first time in my life. The goal of my trip wasn’t to taste the local cuisine, tour world-famous museums, or grab a pint of the local brew (though I ended up doing all those things anyway). It was to deliver a talk three days later at &amp;ldquo;FOSDEM 2018 Rust Devroom&amp;rdquo; about our experience at PingCAP using Rust to build TiKV, a distributed transactional Key-Value storage engine.</description>
    </item>
    
    <item>
      <title>TiDB 1.0.8 Release Notes</title>
      <link>https://pingcap.com/blog/2018-02-11-108/</link>
      <pubDate>Sun, 11 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2018-02-11-108/</guid>
      <description>On Feburary 11, 2018, TiDB 1.0.8 is released with the following updates:
TiDB:  Fix issues in the Outer Join result in some scenarios Optimize the performance of the InsertIntoIgnore statement Fix the issue in the ShardRowID option Add limitation (Configurable, the default value is 5000) to the DML statements number within a transaction Fix an issue in the Table/Column aliases returned by the Prepare statement Fix an issue in updating statistics delta Fix a panic error in the Drop Column statement Fix an DML issue when running the Add Column After statement Improve the stability of the GC process by ignoring the regions with GC errors Run GC concurrently to accelerate the GC process Provide syntax support for the CREATE INDEX statement  PD:  Reduce the lock overheat of the region heartbeats Fix the issue that a hot region scheduler selects the wrong Leader  TiKV:  Use DeleteFilesInRanges to clear stale data and improve the TiKV starting speed Using Decimal in Coprocessor sum Sync the metadata of the received Snapshot compulsorily to ensure its safety  To upgrade from 1.</description>
    </item>
    
    <item>
      <title>TiDB DevCon 2018 Recap - News, Latest Development, and Roadmap</title>
      <link>https://pingcap.com/blog/tidb-devcon-2018-recap/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/tidb-devcon-2018-recap/</guid>
      <description>On January 20th, 2018, a chilly Saturday in the middle of the winter, more than 200 coders, hackers, and techies streamed into Garage Café, a chic coffee shop in the heart of Beijing’s techhub, Zhongguancun. They weren’t there to get coffee. They weren’t there to stay warm. They were there to be part of TiDB DevCon 2018, a technology party for the developers, by the developers.
TiDB DevCon 2018 attendees signing-in on the event banner</description>
    </item>
    
    <item>
      <title>TiDB 1.0.7 Release Notes</title>
      <link>https://pingcap.com/blog/2018-01-22-107/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2018-01-22-107/</guid>
      <description>On January 22, 2018, TiDB 1.0.7 is released with the following updates:
TiDB:  Optimize the FIELD_LIST command Fix data race of the information schema Avoid adding read-only statements to history Add the session variable to control the log query Fix the resource leak issue in statistics Fix the goroutine leak issue Add schema info API for the http status server Fix an issue about IndexJoin Update the behavior when RunWorker is false in DDL Improve the stability of test results in statistics Support PACK_KEYS syntax for the CREATE TABLE statement Add row_id column for the null pushdown schema to optimize performance  PD:  Fix possible scheduling loss issue in abnormal conditions Fix the compatibility issue with proto3 Add the log  TiKV:  Support Table Scan Support the remote mode in tikv-ctl Fix the format compatibility issue of tikv-ctl proto Fix the loss of scheduling command from PD Add timeout in Push metric  To upgrade from 1.</description>
    </item>
    
    <item>
      <title>TiDB 1.1 Alpha Release Notes</title>
      <link>https://pingcap.com/blog/2018-01-19-11-alpha/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2018-01-19-11-alpha/</guid>
      <description> On January 19, 2018, TiDB 1.1 Alpha is released. This release has great improvement in MySQL compatibility, SQL optimization, stability, and performance.
TiDB:  SQL parser  Support more syntax  SQL query optimizer  Use more compact structure to reduce statistics info memory usage Speed up loading statistics info when starting tidb-server Provide more accurate query cost evaluation Use Count-Min Sketch to evaluate the cost of queries using unique index more accurately Support more complex conditions to make full use of index  SQL executor  Refactor all executor operators using Chunk architecture, improve the execution performance of analytical statements and reduce memory usage Optimize performance of the INSERT INGORE statement Push down more types and functions to TiKV Support more SQL_MODE Optimize the Load Data performance to increase the speed by 10 times Optimize the Use Database performance Support statistics on the memory usage of physical operators  Server  Support the PROXY protocol   PD:  Add more APIs Support TLS Add more cases for scheduling Simulator Schedule to adapt to different Region sizes Fix some bugs about scheduling  TiKV:  Support Raft learner Optimize Raft Snapshot and reduce the IO overhead Support TLS Optimize the RocksDB configuration to improve performance Optimize count (*) and query performance of unique index in Coprocessor Add more failpoints and stability test cases Solve the reconnection issue between PD and TiKV Enhance the features of the data recovery tool TiKV-CTL Support splitting according to table in Region Support the Delete Range feature Support setting the IO limit caused by snapshot Improve the flow control mechanism  </description>
    </item>
    
    <item>
      <title>TiDB 1.0.6 Release Notes</title>
      <link>https://pingcap.com/blog/2018-01-08-106/</link>
      <pubDate>Mon, 08 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2018-01-08-106/</guid>
      <description>On January 08, 2018, TiDB 1.0.6 is released with the following updates:
TiDB:  Support the Alter Table Auto_Increment syntax Fix the bug in Cost Based computation and the Null Json issue in statistics Support the extension syntax to shard the implicit row ID to avoid write hot spot for a single table Fix a potential DDL issue Consider the timezone setting in the curtime, sysdate and curdate functions Support the SEPARATOR syntax in the GROUP_CONCAT function Fix the wrong return type issue of the GROUP_CONCAT function.</description>
    </item>
    
    <item>
      <title>2017 Reflection and Gratitude</title>
      <link>https://pingcap.com/blog/pingcap-reflection-and-gratitude/</link>
      <pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/pingcap-reflection-and-gratitude/</guid>
      <description>In open source, we trust!
2017 has witnessed the growth of PingCAP, from Beijing to Silicon Valley, and the evolution of TiDB, from RC1 to the 1.0 release, and then to the 1.0.5 release. As our CEO Max said in the TiDB 1.0 announcement, &amp;ldquo;because of the hard work and dedication of not just every member of our team, but also every contributor, user, and partner in our open source community.</description>
    </item>
    
    <item>
      <title>TiDB 1.0.5 Release Notes</title>
      <link>https://pingcap.com/blog/2017-12-26-105/</link>
      <pubDate>Tue, 26 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-12-26-105/</guid>
      <description>On December 26, 2017, TiDB 1.0.5 is released with the following updates:
TiDB  Add the max value for the current Auto_Increment ID in the Show Create Table statement. Fix a potential goroutine leak. Support outputting slow queries into a separate file. Load the TimeZone variable from TiKV when creating a new session. Support the schema state check so that the Show Create Tableand Analyze statements process the public table/index only.</description>
    </item>
    
    <item>
      <title>Tick or Tock? Keeping Time and Order in Distributed Databases</title>
      <link>https://pingcap.com/blog/Time-in-Distributed-Systems/</link>
      <pubDate>Fri, 22 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/Time-in-Distributed-Systems/</guid>
      <description>Preface At re:Invent 2017, Amazon Web Services (AWS) announced Amazon Time Sync Service, a highly accurate and reliable time reference that is natively accessible from Amazon EC2 instances. It is much like the Google TrueTime published in 2012. Why do Google and AWS both want to make efforts to provide global time service? Is there any inspiration for building distributed database? This topic is important to think about.
Time synchronization remains a hard nut to crack in distributed systems, especially for distributed databases such as TiDB where time is used to confirm the order of the transaction to guarantee the ACID compliance.</description>
    </item>
    
    <item>
      <title>TiDB 1.0.4 Release Notes</title>
      <link>https://pingcap.com/blog/2017-12-11-104/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-12-11-104/</guid>
      <description>TiDB 1.0.4 Release Notes On December 11, 2017, TiDB 1.0.4 is released with the following updates:
TiDB  Speed up the loading of the statistics when starting the tidb-server Improve the performance of the show variables statement Fix a potential issue when using the Add Index statement to handle the combined indexes Fix a potential issue when using the Rename Table statement to move a table to another database Accelerate the effectiveness for the Alter/Drop User statement  TiKV  Fix a possible performance issue when a snapshot is applied  Fix the performance issue for reverse scan after removing a lot of data Fix the wrong encoded result for the Decimal type under special circumstances  To upgrade from 1.</description>
    </item>
    
    <item>
      <title>PingCAP Plants its Seed in Silicon Valley</title>
      <link>https://pingcap.com/blog/Silicon-Valley-Office-Announcement/</link>
      <pubDate>Fri, 08 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/Silicon-Valley-Office-Announcement/</guid>
      <description>PingCAP Plants its Seed in Silicon Valley PingCAP, a cutting-edge distributed Hybrid Transactional/Analytical Processing (HTAP) database company, is excited to announce the opening of its Silicon Valley office, located at the GSV Labs in Redwood City, California. GSV (Global Silicon Valley) Labs is a global innovation platform that houses more than 170 startups, investors, and partners in its 60,000 square foot space in the heart of Silicon Valley. Its member startups work in a wide range of technologies and industries, from Big Data and healthcare, to VR and education.</description>
    </item>
    
    <item>
      <title>A TiKV Source Code Walkthrough – Raft Optimization</title>
      <link>https://pingcap.com/blog/optimizing-raft-in-tikv/</link>
      <pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/optimizing-raft-in-tikv/</guid>
      <description>Paxos or Raft is frequently used to ensure data consistency in the distributed databases. But Paxos is known for its complexity and is rather difficult to understand while Raft is very simple. Therefore, a lot of emerging databases tend to use Raft as the consensus algorithm at its bottom layer. TiKV is no exception.
Simple as Raft is, its performance is not ideal if we follow exactly the way introduced in the Paper.</description>
    </item>
    
    <item>
      <title>TiDB 1.0.3 Release Notes</title>
      <link>https://pingcap.com/blog/2017-11-28-103/</link>
      <pubDate>Tue, 28 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-11-28-103/</guid>
      <description>TiDB  Optimize the performance in transaction conflicts scenario Add the TokenLimit option in the config file Output the default database in slow query logs Remove the DDL statement from query duration metrics Optimize the query cost estimation Fix the index prefix issue when creating tables Support pushing down the expressions for the Float type to TiKV Fix the issue that it is slow to add index for tables with discrete integer primary index Reduce the unnecessary statistics updates Fix a potential issue during the transaction retry  PD  Support adding more types of schedulers using API  TiKV  Fix the deadlock issue with the PD client Fix the issue that the wrong leader value is prompted for NotLeader Fix the issue that the chunk size is too large in the coprocessor  To upgrade from 1.</description>
    </item>
    
    <item>
      <title>TiDB 1.0.2 Release Notes</title>
      <link>https://pingcap.com/blog/2017-11-13-102/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-11-13-102/</guid>
      <description>TiDB:
 Optimize the cost estimation of index point query Support the Alter Table Add Column (ColumnDef ColumnPosition) syntax Optimize the queries whose where conditions are contradictory Optimize the Add Index operation to rectify the progress and reduce repetitive operations Optimize the Index Look Join operator to accelerate the query speed for small data size Fix the issue with prefix index judgment  Placement Driver (PD):
 Improve the stability of scheduling under exceptional situations  TiKV:</description>
    </item>
    
    <item>
      <title>TiDB 1.0.1 Release Notes</title>
      <link>https://pingcap.com/blog/2017-11-01-101/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-11-01-101/</guid>
      <description> TiDB:
 Support canceling DDL Job. Optimize the IN expression. Correct the result type of the Show statement. Support log slow query into a separate log file. Fix bugs.  TiKV:
 Support flow control with write bytes. Reduce Raft allocation. Increase coprocessor stack size to 10MB. Remove the useless log from the coprocessor.   </description>
    </item>
    
    <item>
      <title>PingCAP Launches TiDB 1.0</title>
      <link>https://pingcap.com/blog/2017-10-17-announcement/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-10-17-announcement/</guid>
      <description>PingCAP Launches TiDB 1.0, A Scalable Hybrid Database Solution October 16, 2017 - PingCAP Inc., a cutting-edge distributed database technology company, officially announces the release of TiDB 1.0. TiDB is an open source distributed Hybrid Transactional/Analytical Processing (HTAP) database that empowers businesses to meet both workloads with a single database.
In the current database landscape, infrastructure engineers often have to use one database for online transactional processing (OLTP) and another for online analytical processing (OLAP).</description>
    </item>
    
    <item>
      <title>TiDB 1.0 release notes</title>
      <link>https://pingcap.com/blog/2017-10-16-ga/</link>
      <pubDate>Mon, 16 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-10-16-ga/</guid>
      <description>On October 16, 2017, TiDB 1.0 is now released! This release is focused on MySQL compatibility, SQL optimization, stability, and performance.
TiDB:  The SQL query optimizer:  Adjust the cost model Analyze pushdown Function signature pushdown  Optimize the internal data format to reduce the interim data size Enhance the MySQL compatibility Support the NO_SQL_CACHE syntax and limit the cache usage in the storage engine Refactor the Hash Aggregator operator to reduce the memory usage Support the Stream Aggregator operator  PD:  Support read flow based balancing Support setting the Store weight and weight based balancing  TiKV:  Coprocessor now supports more pushdown functions Support pushing down the sampling operation Support manually triggering data compact to collect space quickly Improve the performance and stability Add a Debug API for debugging TiSpark Beta Release: Support configuration framework Support ThriftSever/JDBC and Spark SQL  Acknowledgement Special thanks to the following enterprises and teams!</description>
    </item>
    
    <item>
      <title>Scale the Relational Database with NewSQL</title>
      <link>https://pingcap.com/blog/2017-10-10-nextcon/</link>
      <pubDate>Tue, 10 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-10-10-nextcon/</guid>
      <description>This is the speech Li SHEN gave at the 3rd NEXTCON: Cloud+Data NEXT Conference Seattle on September 16th, 2017.
 Speaker introduction Why we build a new relational database TiDB Project - Goal Architecture The core components of TiDB  The Storage stack Dynamic Multi-Raft Safe Split ACID Transaction Something we haven&amp;rsquo;t mentioned Placement Driver The SQL Layer What Happens behind a query SQL Layer Overview Cost-Based Optimizer  Tools matter Spark on TiKV Future plans  Speaker introduction Hello everyone, I am glad to be here in this beautiful city and share this talk with you.</description>
    </item>
    
    <item>
      <title>Why did we choose Rust over Golang or C/C&#43;&#43; to develop TiKV?</title>
      <link>https://pingcap.com/blog/2017-09-26-whyrust/</link>
      <pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-09-26-whyrust/</guid>
      <description>What is Rust Rust is a systems programming language sponsored by Mozilla Research. It moves fast and steady with a 6-week release cycle ever since its 1.0 version in May 2015.
See the following list for some of the features that most attract us:
 The design principles of Rust resemble with C++ in Abstraction without overhead and RAII (Resource acquisition is initialization).
 The minimum runtime and efficient C bindings empower Rust to be as efficient as C and C++, thus making it very suitable for the systems programming field where high performance matters the most.</description>
    </item>
    
    <item>
      <title>RocksDB in TiKV</title>
      <link>https://pingcap.com/blog/2017-09-15-rocksdbintikv/</link>
      <pubDate>Fri, 15 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-09-15-rocksdbintikv/</guid>
      <description>This is the speech Siddon Tang gave at the RocksDB meetup on August 28, 2017.
 Speaker Introduction Agenda Why did we choose RocksDB? How are we using RocksDB?  TiKV Architecture Region Raft InsertWithHint Prefix Iterator Table Property for Region Split Check Table Property for GC Check Ingest the SST File Others  How are we contributing? Future Plans  Speaker Introduction Hi every one, thanks for having me here, the RocksDB team.</description>
    </item>
    
    <item>
      <title>Futures and gRPC in Rust</title>
      <link>https://pingcap.com/blog/2017-09-12-futuresandgrpc/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-09-12-futuresandgrpc/</guid>
      <description>This is the speech Tang Liu (tl@pingcap.com) gave at the Bay Area Rust Meetup August 2017. See the video.
 Speaker Introduction Async Programming  Why not Sync? Why Async?  Callback Hell Coroutine Makes it Easy Future, Another Way   Futures in Rust  Futures Combinator Synchronization Stream Sink Task  gRPC  Why gRPC? HTTP/2 gRPC based on HTTP/2  Combine Futures and gRPC  C gRPC Keywords Pseudo Flow Unary Client Streaming Server Streaming Duplex Streaming  Unary Future Implementation  Client Unary Unary Future Resolve Future  Benchmark Misc  Speaker Introduction Hi everyone!</description>
    </item>
    
    <item>
      <title>How we Hunted a Data Corruption bug in RocksDB</title>
      <link>https://pingcap.com/blog/2017-09-08-rocksdbbug/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-09-08-rocksdbbug/</guid>
      <description>Data was corrupted. A cluster panicked. The crime scene was compromised. What happened? Detective Huang (huachao@pingcap.com) went all lengths to locate the criminal and solved it once and for all.
Background As a distributed open source HTAP database, TiDB uses TiKV as its storage engine. Inside TiKV, we use RocksDB as the local storage. RocksDB is a great project. It&amp;rsquo;s mature, fast, tunable, and widely used in very large scale production environments.</description>
    </item>
    
    <item>
      <title>When TiDB Meets Jepsen</title>
      <link>https://pingcap.com/blog/2017-09-01-tidbmeetsjepsen/</link>
      <pubDate>Fri, 01 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-09-01-tidbmeetsjepsen/</guid>
      <description>What is Jepsen? How does Jepsen work?  DB Client Checker Nemesis Generator  Jepsen tests that TiDB goes through  The Bank Test The Set Test The Register Test  Miscellaneous  What is Jepsen? Written by Kyle Kingsbury in Clojure. Jepsen is a test framework for distributed systems verification. Kingsbury has used it to verify the consistency of many famous distributed systems (etcd, ZooKeeper, CockroachDB, etc.) and found multiple bugs in some of these systems.</description>
    </item>
    
    <item>
      <title>TiDB Pre-GA Release Notes</title>
      <link>https://pingcap.com/blog/2017-08-30-prega/</link>
      <pubDate>Wed, 30 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-08-30-prega/</guid>
      <description>TiDB:
 The SQL query optimizer:  Adjust the cost model Use index scan to handle the where clause with the compare expression which has different types on each side Support the Greedy algorithm based Join Reorder  Many enhancements have been introduced to be more compatible with MySQL Support Natural Join Support the JSON type (Experimental), including the query, update and index of the JSON fields Prune the useless data to reduce the consumption of the executor memory Support configuring prioritization in the SQL statements and automatically set the prioritization for some of the statements according to the query type Completed the expression refactor and the speed is increased by about 30%  Placement Driver (PD):</description>
    </item>
    
    <item>
      <title>The Design and Implementation of Multi-raft</title>
      <link>https://pingcap.com/blog/2017-08-15-multi-raft/</link>
      <pubDate>Tue, 15 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-08-15-multi-raft/</guid>
      <description>(Email: tl@pingcap.com)

 Placement Driver Raftstore  Region RocksDB / Keys Prefix Peer Storage Peer Multi-raft  Summary  Placement Driver Placement Driver (PD), the global central controller of TiKV, stores the metadata information of the entire TiKV cluster, generates Global IDs, and is responsible for the scheduling of TiKV and the global TSO time service.
PD is a critical central node. With the integration of etcd, it automatically supports the distributed scaling and failover as well as solves the problem of single point of failure.</description>
    </item>
    
    <item>
      <title>How TiDB tackles fast data growth and complex queries for yuanfudao.com</title>
      <link>https://pingcap.com/blog/2017-08-08-tidbforyuanfudao/</link>
      <pubDate>Tue, 08 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-08-08-tidbforyuanfudao/</guid>
      <description>TiDB use case Yuanfudao.com is an online tutoring service targeting the K-12 educational segment in China with the largest number of elementary and secondary school student users. It owns three applications, Yuantiku (猿题库), the online question bank, Xiaoyuansouti (小猿搜题), the application for question search by taking pictures, and yuanfudao.com, an online tutoring service.
So far, the Yuanfudao APPs have more than 1.16 million paying users and provide live tutoring courses of English and Math Olympiad to the elementary users, as well as all the subjects for secondary school students.</description>
    </item>
    
    <item>
      <title>TiDB RC4 Release Notes</title>
      <link>https://pingcap.com/blog/2017-08-04-rc4/</link>
      <pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-08-04-rc4/</guid>
      <description>Highlight:  For performance, the write performance is improved significantly, and the computing task scheduling supports prioritizing to avoid the impact of OLAP on OLTP.
 The optimizer is revised for a more accurate query cost estimating and for an automatic choice of the Join physical operator based on the cost.
 Many enhancements have been introduced to be more compatible with MySQL.
 TiSpark is now released to better support the OLAP business scenarios.</description>
    </item>
    
    <item>
      <title>A TiKV Source Code Walkthrough - Raft in TiKV</title>
      <link>https://pingcap.com/blog/2017-07-28-raftintikv/</link>
      <pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-07-28-raftintikv/</guid>
      <description>(Email: tl@pingcap.com)

Table of content  Architecture Raft  Storage Config RawNode   Architecture Below is TiKV’s overall architecture:
Placement Driver: Placement Driver (PD) is responsible for the management scheduling of the whole cluster.
Node: Node can be regarded as an actual physical machine and each Node is responsible for one or more Store.
Store: Store uses RocksDB to implement actual data storage and usually one Store corresponds to one disk.</description>
    </item>
    
    <item>
      <title>TiDB Best Practices</title>
      <link>https://pingcap.com/blog/2017-07-24-tidbbestpractice/</link>
      <pubDate>Mon, 24 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-07-24-tidbbestpractice/</guid>
      <description>From Li SHEN: shenli@pingcap.com
See the following blogs (Data Storage, Computing, Scheduling) for TiDB&amp;rsquo;s principles.
Table of Content  Preface Basic Concepts  Raft Distributed Transactions Data Sharding Load Balancing SQL on KV Secondary Indexes  Scenarios and Practices  Deployment Importing Data Write Query Monitoring and Log Documentation Best Scenarios for TiDB   Preface Database is a generic infrastructure system. It is important to, for one thing, consider various user scenarios during the development process, and for the other, modify the data parameters or the way to use according to actual situations in specific business scenarios.</description>
    </item>
    
    <item>
      <title>TiDB Internal (III) - Scheduling</title>
      <link>https://pingcap.com/blog/2017-07-20-tidbinternal3/</link>
      <pubDate>Thu, 20 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-07-20-tidbinternal3/</guid>
      <description>From Li SHEN: shenli@pingcap.com
Table of Content  Why scheduling The Requirements of Scheduling The Basic Operations of Scheduling Information Collecting The Policy of Scheduling The implementation of Scheduling Summary  Why scheduling? From the first blog of TiDB internal, we know that TiKV cluster is the distributed KV storage engine of TiDB database. Data is replicated and managed in Regions and each Region has multiple Replicas distributed on different TiKV nodes.</description>
    </item>
    
    <item>
      <title>TiDB Internal (I) - Data Storage</title>
      <link>https://pingcap.com/blog/2017-07-11-tidbinternal1/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-07-11-tidbinternal1/</guid>
      <description>From Li SHEN: shenli@pingcap.com 
Table of Content  Foreword Storing data Key-Value RocksDB Raft Region MVCC Transaction Miscellaneous  Foreword: Database, operating system and compiler are known as the three big systems and regarded as the footstone of the whole computer software. Among them, database supports the businesses and is closer to the application layer. After decades of development, progress keeps emerging in this field.
Many people must have used databases of different kinds, but few have the experience of developing one, especially a distributed database.</description>
    </item>
    
    <item>
      <title>TiDB Internal (II) - Computing</title>
      <link>https://pingcap.com/blog/2017-07-11-tidbinternal2/</link>
      <pubDate>Tue, 11 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-07-11-tidbinternal2/</guid>
      <description>From Li SHEN: shenli@pingcap.com
Table of Content  Mapping the Relational Model to the Key-Value Model Metadata Management Architecture of SQL on Key-Value SQL Computing Distributed SQL Operation Architecture of the SQL Layer Summary  My last blog introduces the way that TiDB stores data, which is also the basic concepts of TiKV. In this article, I’ll elaborate on how TiDB uses the bottom layer Key-Value to store data, maps the relational model to the Key-Value model and performs SQL computing.</description>
    </item>
    
    <item>
      <title>Refactoring the Built-in Functions in TiDB</title>
      <link>https://pingcap.com/blog/2017-06-27-refactor-builtin/</link>
      <pubDate>Tue, 27 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-06-27-refactor-builtin/</guid>
      <description>In order to accelerate expression evaluation, we recently refactored its framework. This tutorial will show you how to use the new computational framework to rewrite or add a built-in function in TiDB.
Table of Content  The overall process Example  Take a look at builtin_string.go Refine the existing TestLength() method Test the implementation of LENGTH at the SQL level   Before refactoring&amp;hellip; After refactoring&amp;hellip; Appendix  The overall process   Select any function to your interest from the expression directory, assuming the function is named XX.</description>
    </item>
    
    <item>
      <title>TiDB RC3 Release Notes</title>
      <link>https://pingcap.com/blog/2017-06-20-rc3/</link>
      <pubDate>Tue, 20 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-06-20-rc3/</guid>
      <description>Highlight:  The privilege management is refined to enable users to manage the data access privileges using the same way as in MySQL.
 DDL is accelerated.
 The load balancing policy and process are optimized for performance.
 TiDB-Ansible is open sourced. By using TiDB-Ansilbe, you can deploy, upgrade, start and shutdown a TiDB cluster with one click.
  Detailed updates: TiDB:  The following features are added or improved in the SQL query optimizer:</description>
    </item>
    
    <item>
      <title>Rust in TiKV</title>
      <link>https://pingcap.com/blog/2017-05-27-rust-in-tikv/</link>
      <pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-05-27-rust-in-tikv/</guid>
      <description>This is the speech Siddon Tang gave at the 1st Rust Meetup in Beijing on April 16, 2017.
(Email: tl@pingcap.com)
Table of Content 
 What&amp;rsquo;s TiKV We need a language with&amp;hellip; Why not C++? Why not Go? So we turned to Rust&amp;hellip; TiKV Timeline TiKV Architecture Multi-Raft Scale out A simple write flow Key technologies Future plan  Hello everyone, today I will talk about how we use Rust in TiKV.</description>
    </item>
    
    <item>
      <title>A Brief Introduction of TiDB</title>
      <link>https://pingcap.com/blog/2017-05-23-perconalive17/</link>
      <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-05-23-perconalive17/</guid>
      <description>This is the speech Edward Huang gave at Percona Live - Open Source Database Conference 2017.
The slides are here.
 Speaker introduction What would you do when… TiDB Project - Goal Sofware Stack Safe Split Scale Out ACID Transaction Distributed SQL TiDB SQL Layer Overview What Happens behind a query Distributed Join (HashJoin) Tools Matter Use Cases Sysbench Roadmap  Speaker introduction  As one of the three co-founders of PingCAP, I feel honored that PingCAP was once again invited to the Percona Live Conference.</description>
    </item>
    
    <item>
      <title>Migration from MySQL to TiDB to handle tens of millions of rows of data per day</title>
      <link>https://pingcap.com/blog/2017-05-22-Comparison-between-MySQL-and-TiDB-with-tens-of-millions-of-data-per-day/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-05-22-Comparison-between-MySQL-and-TiDB-with-tens-of-millions-of-data-per-day/</guid>
      <description>TiDB use case Table of content  Background MySQL, our first choice Look for new solutions TiDB, give it a go Feedbacks from TiDB  Background GAEA is a mobile gaming provider and aims to develop high-quality games for international players. GAEA uses its GaeaAD system to support the cross-platform real-time advertising system. GaeaAD performs a real-time match between the advertising data and the information reported by the game SDK.</description>
    </item>
    
    <item>
      <title>TiDB RC2 Release Notes</title>
      <link>https://pingcap.com/blog/2017-03-01-rc2/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-03-01-rc2/</guid>
      <description>We have great efforts to improve the compatibility with MySQL, SQL query optimizer, system stability and performance in this version. What’s more, a new + of permission management is added and users can control data access rights in the same way of MySQL privilege management system.
TiDB:  Query optimizer
 Collect column/index statistics and use them in the query optimizer
 Optimize the correlated subquery
 Optimize the Cost Based Optimizer (CBO) framework</description>
    </item>
    
    <item>
      <title>About the TiDB Source Code</title>
      <link>https://pingcap.com/blog/2017-01-06-about-the-tidb-source-code/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2017-01-06-about-the-tidb-source-code/</guid>
      <description>The target audience of this document is the contributors in the TiDB community. The document aims to help them understand the TiDB project. It covers the system architecture, the code structure, and the execution process.
Table of content  System architecture Overview of the code structure The protocol layer The SQL layer The optimizer The executor The distributed executor  System architecture As is shown in the architecture diagram, the TiDB Server is between the Load Balancer (or Application) and the storage engine layer at the bottom.</description>
    </item>
    
    <item>
      <title>TiDB RC1 Release Notes</title>
      <link>https://pingcap.com/blog/2016-12-23-rc1/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2016-12-23-rc1/</guid>
      <description>The TiDB RC1 is now released. See the following updates in this release:
TiKV:  The write speed has been improved. The disk space usage is reduced. Hundreds of TBs of data can be supported.
 The stability is improved and TiKV can support a cluster with 200 nodes. Supports the Raw KV API and the Golang client.  Placement Driver (PD): + The scheduling strategy framework is optimized and now the strategy is more flexible and reasonable.</description>
    </item>
    
    <item>
      <title>Adding Built-in Functions</title>
      <link>https://pingcap.com/blog/2016-12-19-adding-built-in-function/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2016-12-19-adding-built-in-function/</guid>
      <description>This document describes how to add built-in functions to TiDB.
 Background The procedure to add a built-in function Example  Background How is the SQL statement executed in TiDB?
The SQL statement is parsed to an abstract syntax tree (AST) by the parser first and then uses the optimizer to generate an execution plan. The plan can then be executed to get the result. This process involves how to access the data in the table, and how to filter, calculate, sort, aggregate, and distinct the data, etc.</description>
    </item>
    
    <item>
      <title>Subquery Optimization in TiDB</title>
      <link>https://pingcap.com/blog/2016-12-07-Subquery-Optimization-in-TiDB/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2016-12-07-Subquery-Optimization-in-TiDB/</guid>
      <description>MathJax.Hub.Config({ extensions: [&#34;tex2jax.js&#34;], jax: [&#34;input/TeX&#34;, &#34;output/HTML-CSS&#34;], tex2jax: { inlineMath: [ [&#39;$&#39;,&#39;$&#39;], [&#34;\\(&#34;,&#34;\\)&#34;] ], displayMath: [ [&#39;$$&#39;,&#39;$$&#39;], [&#34;\\[&#34;,&#34;\\]&#34;] ], processEscapes: true }, &#34;HTML-CSS&#34;: { availableFonts: [&#34;TeX&#34;] } });    Introduction to subqueries Subquery is a query within another SQL query. A common subquery is embedded within the FROM clause, for example：
SELECT ID FROM (SELECT * FROM SRC) AS T The subexpressions in the FROM clauses can be processed very well by the general SQL optimizers.</description>
    </item>
    
    <item>
      <title>MVCC in TiKV</title>
      <link>https://pingcap.com/blog/2016-11-17-mvcc-in-tikv/</link>
      <pubDate>Thu, 17 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2016-11-17-mvcc-in-tikv/</guid>
      <description>MVCC Introduction to concurrency control Transaction isolation is important for database management system. Because database should provide an illusion that the user is the only one who connects to the database, which greatly simplifies application development. But, the concurrency controlling problems like data races must be resolved since there will be a lot of connections to the database. Due to this background, the database management system (DBMS) ensures that the resulting concurrent access patterns are safe, ideally by serializablity.</description>
    </item>
    
    <item>
      <title>Travelling Back in Time and Reclaiming the Lost Treasures</title>
      <link>https://pingcap.com/blog/2016-11-15-Travelling-Back-in-Time-and-Reclaiming-the-Lost-Treasures/</link>
      <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2016-11-15-Travelling-Back-in-Time-and-Reclaiming-the-Lost-Treasures/</guid>
      <description>About the History Read feature in TiDB Data is the core and is a matter of life and death for every business. So ensuring the data safety is the top priority of every database. From a macro point of view, the safety of data is not only about whether a database is stable enough that no data is lost, but also about whether a sufficient and convenient solution is in place when data is lost because of the business or human errors, for example, to solve the anti-cheat problem in the game industry or to meet the audit requirements in the financing business.</description>
    </item>
    
    <item>
      <title>A Deep Dive into TiKV</title>
      <link>https://pingcap.com/blog/2016-11-09-Deep-Dive-into-TiKV/</link>
      <pubDate>Wed, 09 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2016-11-09-Deep-Dive-into-TiKV/</guid>
      <description>Table of Content  About TiKV Architecture Protocol Raft Placement Driver (PD) Transaction Coprocessor Key processes analysis  Key-Value operation Membership Change Split   About TiKV TiKV (The pronunciation is: /&amp;lsquo;taɪkeɪvi:/ tai-K-V, etymology: titanium) is a distributed Key-Value database which is based on the design of Google Spanner, F1, and HBase, but it is much simpler without dependency on any distributed file system.
Architecture  Placement Driver (PD): PD is the brain of the TiKV system which manages the metadata about Nodes, Stores, Regions mapping, and makes decisions for data placement and load balancing.</description>
    </item>
    
    <item>
      <title>How we build TiDB</title>
      <link>https://pingcap.com/blog/2016-10-17-how-we-build-tidb/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/2016-10-17-how-we-build-tidb/</guid>
      <description>This is the speech Max Liu gave at Percona Live Open Source Database Conference 2016. 
The slides are here.
 Speaker introduction Why another database? What to build? How to design?  The principles or the philosophy  Disaster recovery Easy to use The community and ecosystem  Loose coupling – the logical architecture The alternatives  How to develop  The architecture TiKV core technologies  TiKV software stack Placement Driver Raft MVCC Transaction  TiDB core technologies  Mapping table data to Key-Value store Predicate push-down Schema changes   How to test?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://pingcap.com/blog/README/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://pingcap.com/blog/README/</guid>
      <description> blog meta data  title author  format: list(array) [&amp;lsquo;author-1&amp;rsquo;, &amp;lsquo;author-2&amp;rsquo;]  date:  format: yyyy-mm-dd  summary tags -  format: list(array) [&amp;lsquo;tag-1&amp;rsquo;, &amp;lsquo;tag-2&amp;rsquo;]   --- title: Blog Title author: [&amp;#39;Author&amp;#39;] date: yyyy-mm-dd summary: Blog Summary tags: [&amp;#39;Tag1&amp;#39;, &amp;#39;Tag2&amp;#39;] ---</description>
    </item>
    
  </channel>
</rss>